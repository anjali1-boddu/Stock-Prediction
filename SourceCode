import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
data = pd.read_csv('ORCL.csv')
print(data.info())  # Check data types and missing values
print(data.head())  # Preview the first few rows of the dataset
data["Close"] = pd.to_numeric(data["Close"], errors='coerce')  # Ensure 'Close' is numeric
data = data.dropna()  # Remove any rows with missing data

# Extracting the 'Close' prices as a NumPy array
ORCL = data["Close"].values.reshape(-1, 1)
sc = MinMaxScaler(feature_range=(0,1))
ORCL_scaled = sc.fit_transform(ORCL)
training_size = int(len(ORCL_scaled) * 0.8)
train_data, test_data = ORCL_scaled[:training_size], ORCL_scaled[training_size:]

# Convert data into sequences for LSTM
def create_dataset(dataset, time_step=1):
    X, y = [], []
    for i in range(len(dataset) - time_step - 1):
        X.append(dataset[i:(i + time_step), 0])
        y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 60  # Using 60 days of data to predict the 61st
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# Reshape X_train and X_test for LSTM input (samples, time steps, features)
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(time_step, 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=25))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=100, batch_size=32)
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform predictions to get back to the original scale
train_predict = sc.inverse_transform(train_predict)
test_predict = sc.inverse_transform(test_predict)
y_train_inv = sc.inverse_transform(y_train.reshape(-1, 1))
y_test_inv = sc.inverse_transform(y_test.reshape(-1, 1))
plt.figure(figsize=(14,5))
plt.plot(y_train_inv, color='blue', label='Actual Training Stock Price')
plt.plot(train_predict, color='red', label='Predicted Training Stock Price')
plt.title('Stock Price Prediction on Training Data')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
